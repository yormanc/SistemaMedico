/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import javax.swing.JOptionPane;
import Services.MedicSystemService;
import models.Doctor;

/**
 *
 * @author WINDOWS 11
 */
public class FrmSearch extends javax.swing.JFrame {

    private final MedicSystemService medicSystemService;

    /**
     * Creates new form FrmSearch
     */
    public FrmSearch(MedicSystemService medicSystemService) {
        this.medicSystemService = medicSystemService;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jlblTitulo = new javax.swing.JLabel();
        jlblNumeroDocumento = new javax.swing.JLabel();
        jtextNumeroDocumento = new javax.swing.JTextField();
        jbtnBuscarModificar = new javax.swing.JButton();
        jbtnBuscarEliminar = new javax.swing.JButton();
        jbtnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Buscar Medico");
        setResizable(false);

        jPanel1.setMinimumSize(new java.awt.Dimension(350, 250));
        jPanel1.setPreferredSize(new java.awt.Dimension(350, 250));

        jlblTitulo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jlblTitulo.setText(" Buscar Médico");
        jlblTitulo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jlblNumeroDocumento.setText(" Numero Documento");
        jlblNumeroDocumento.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jtextNumeroDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtextNumeroDocumentoActionPerformed(evt);
            }
        });

        jbtnBuscarModificar.setText("Buscar y Modificar");
        jbtnBuscarModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBuscarModificarActionPerformed(evt);
            }
        });

        jbtnBuscarEliminar.setText("Buscar y Eliminar");
        jbtnBuscarEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBuscarEliminarActionPerformed(evt);
            }
        });

        jbtnCancelar.setText("Cancelar");
        jbtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbtnBuscarModificar)
                    .addComponent(jlblNumeroDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtextNumeroDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnBuscarEliminar))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jbtnCancelar)
                .addGap(133, 133, 133))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jlblTitulo)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblNumeroDocumento)
                    .addComponent(jtextNumeroDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnBuscarModificar)
                    .addComponent(jbtnBuscarEliminar))
                .addGap(18, 18, 18)
                .addComponent(jbtnCancelar)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        jlblTitulo.getAccessibleContext().setAccessibleParent(jlblTitulo);
        jlblNumeroDocumento.getAccessibleContext().setAccessibleParent(jlblNumeroDocumento);
        jtextNumeroDocumento.getAccessibleContext().setAccessibleParent(jtextNumeroDocumento);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtextNumeroDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtextNumeroDocumentoActionPerformed
        // Permite buscar al presionar Enter
        jbtnBuscarModificarActionPerformed(evt);
    }//GEN-LAST:event_jtextNumeroDocumentoActionPerformed

    private void jbtnBuscarModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBuscarModificarActionPerformed
        try {
            String idText = jtextNumeroDocumento.getText().trim();
            
            // Validar que no esté vacío
            if (idText.isEmpty()) {
                JOptionPane.showMessageDialog(this, 
                    "Debe ingresar un número de documento", 
                    "Campo Vacío", 
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // Parsear el ID
            int id = Integer.parseInt(idText);
            
            // Validar que sea positivo
            if (id <= 0) {
                JOptionPane.showMessageDialog(this, 
                    "El número de documento debe ser positivo", 
                    "Documento Inválido", 
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // Buscar el doctor
            Doctor doctor = medicSystemService.doctorRepository.searchById(id);

            if (doctor != null) {
                // Abrir FrmModifyDoctor con el doctor encontrado
                FrmModifyDoctor frmModify = new FrmModifyDoctor(medicSystemService, doctor);
                frmModify.setVisible(true);
                frmModify.setLocationRelativeTo(this); // Centrar respecto a esta ventana
                this.dispose(); // Cerrar FrmSearch
            } else {
                JOptionPane.showMessageDialog(this, 
                    "No se encontró ningún médico con el documento: " + id, 
                    "Médico No Encontrado", 
                    JOptionPane.INFORMATION_MESSAGE);
                jtextNumeroDocumento.selectAll(); // Seleccionar el texto para facilitar corrección
                jtextNumeroDocumento.requestFocus();
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "El número de documento debe contener solo números válidos (sin puntos ni comas)", 
                "Error de Formato", 
                JOptionPane.ERROR_MESSAGE);
            jtextNumeroDocumento.selectAll();
            jtextNumeroDocumento.requestFocus();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error al buscar el médico: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // Para debug
        }
    }//GEN-LAST:event_jbtnBuscarModificarActionPerformed

    private void jbtnBuscarEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBuscarEliminarActionPerformed
        try {
            String idText = jtextNumeroDocumento.getText().trim();
            
            // Validar que no esté vacío
            if (idText.isEmpty()) {
                JOptionPane.showMessageDialog(this, 
                    "Debe ingresar un número de documento", 
                    "Campo Vacío", 
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // Parsear el ID
            int id = Integer.parseInt(idText);
            
            // Validar que sea positivo
            if (id <= 0) {
                JOptionPane.showMessageDialog(this, 
                    "El número de documento debe ser positivo", 
                    "Documento Inválido", 
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // Buscar el doctor
            Doctor doctor = medicSystemService.doctorRepository.searchById(id);

            if (doctor != null) {
                // Abrir FrmDelete con el doctor encontrado
                FrmDelete frmDelete = new FrmDelete(medicSystemService, doctor);
                frmDelete.setVisible(true);
                frmDelete.setLocationRelativeTo(this); // Centrar respecto a esta ventana
                this.dispose(); // Cerrar FrmSearch
            } else {
                JOptionPane.showMessageDialog(this, 
                    "No se encontró ningún médico con el documento: " + id, 
                    "Médico No Encontrado", 
                    JOptionPane.INFORMATION_MESSAGE);
                jtextNumeroDocumento.selectAll();
                jtextNumeroDocumento.requestFocus();
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "El número de documento debe contener solo números válidos (sin puntos ni comas)", 
                "Error de Formato", 
                JOptionPane.ERROR_MESSAGE);
            jtextNumeroDocumento.selectAll();
            jtextNumeroDocumento.requestFocus();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error al buscar el médico: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // Para debug
        }
    }//GEN-LAST:event_jbtnBuscarEliminarActionPerformed

    private void jbtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbtnCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JOptionPane.showMessageDialog(null,
                    "Este formulario debe iniciarse desde la aplicación principal\n" +
                    "con un MedicSystemService válido.",
                    "Información",
                    JOptionPane.INFORMATION_MESSAGE);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbtnBuscarEliminar;
    private javax.swing.JButton jbtnBuscarModificar;
    private javax.swing.JButton jbtnCancelar;
    private javax.swing.JLabel jlblNumeroDocumento;
    private javax.swing.JLabel jlblTitulo;
    private javax.swing.JTextField jtextNumeroDocumento;
    // End of variables declaration//GEN-END:variables
}